import org.gradle.api.tasks.testing.logging.*;

allprojects {
    apply plugin: 'java'
    group = 'xyz.ressor'
    
    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    dependencies {
        compileOnly group: 'org.jetbrains', name: 'annotations', version: '17.0.0'
        compile "org.slf4j:slf4j-api:$slf4jVersion"

        testCompile "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
        testCompile "org.apache.logging.log4j:log4j-core:$log4jVersion"
        testCompile "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testCompile "org.mockito:mockito-junit-jupiter:$mockitoVersion"
        testCompile "org.assertj:assertj-core:$assertjVersion"
        testCompile "org.awaitility:awaitility:$awaitilityVersion"
    }

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    test {
        forkEvery = 1
        maxParallelForks = Runtime.getRuntime().availableProcessors() * 4
        useJUnitPlatform()
        testLogging {
            // set options for log level LIFECYCLE
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events TestLogEvent.STARTED,
                        TestLogEvent.FAILED,
                        TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_ERROR,
                        TestLogEvent.STANDARD_OUT
                exceptionFormat TestExceptionFormat.FULL
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }

    configurations.all {
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude module: "log4j-to-slf4j"
        exclude group: "ch.qos.logback"
    }
}
